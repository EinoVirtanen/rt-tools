#!/bin/bash -eu

# Copyright (c) 2014 by Enea Software AB
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Enea Software AB nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


usage() {
    cat <<EOF

usage:
list2mask [options|

Convert cpulist to cpumask.

options:
-h | --help      print this text
-c | --cpus      <cpulist> List of CPUs. Example: 0,2-3
-i | --isolcpus  Take cpulist from isolcpus in /proc/cmdline
-n | --nohz      Take cpulist from nohz_full in /proc/cmdline
-v | --verbose   Print verbose messages to stderr

Use this tool to convert a cpulist to a cpumask. For list definition please
see the Linux cpuset documentation.

EOF
    exit 0
}

VERBOSE=0

# Prints an error message and exits
# $1 = Error message
# Depends on the following global variables:
# CMD
exit_msg () {
    echo "cpulist2mask: $1" >&2
    exit 1
}

verbose_printf () {
    (( VERBOSE )) || return 0
    declare -r fmt="$1"
    shift
    printf -- "${fmt}\n" $@ >&2
}

# Used to check options that take an argument. It exits if the options is
# missing, otherwise it returns the argument.
# $1 = the option
# $2 = next word in the scripts parameter list (possibly the options argument)
#
# Depends on the following global variables:
# CMD
#
# Returns on stdio
# the argument
get_arg()
{
    if [ -z $2 ] || [[ $2 == -* ]]; then
        exit_msg "Option $1 requires an argument"
    fi
    printf "%s" "$2"
}

# This function translates "-" as separator into bash standard whitespaces.
# It adds sanity checks to the process, as well as supporting a single value
# which is translated into <value> <value>.
# NOTE: Current implementation only support a single range or value!
#       If several ranges are needed, use get_range()!
# $1 = range, either single value or <min>-<max>
# $2 = prefix for error prints
get_single_range () {
    # Split range into an array, using "-" as separator
    IFS='-' read -a range <<<"$1"

    # Sanity check the array.
    # Check that array is one or two elements in size
    declare -ri nr_elements=${#range[@]}
    (( nr_elements == 1 || nr_elements == 2 )) || exit_msg "$2: $1: Illegal range"

    # Check that all array entries are integers
    for entry in "${range[@]}"; do
        [ ! -z "${entry##*[!0-9]*}" ] || exit_msg "$2: $entry: Not an integer"
    done

    (( nr_elements == 1 )) && range[1]=${range[0]}

    # If only a single value was given, create a range with this value as both min and max
    echo -n "${range[@]} "
}

# This function translates "-" as separator into bash standard whitespaces.
# It adds sanity checks to the process, as well as supporting a single value
# which is translated into <value> <value>.
# NOTE: Current implementation only support a single range or value!
# $1 = comma separated list of ranges, either single value or <min>-<max>
# $2 = prefix for error prints
get_range () {
    declare -a range_list
    local range

    IFS=, read -a range_list <<<"$1"

    for range in ${range_list[@]}; do
        get_single_range "$range" "$2"
    done
}

# Parameters:
# $@ = comma separated list of ranges, either single value or <min>-<max>
#
# Returns on stdio:
# Mask with bits set according to range
range_to_mask () {
    declare -a range=( $(get_range "$@" "Could not calculate CPU mask") )
    declare -i mask=0

    while true; do
        [[ -z ${1:-} ]] && break
        declare -i min="$1"
        declare -i max="$2"
        shift 2

        (( mask |= (((1 << (max-min+1)) - 1) << min) )) #min
    done

    printf ${mask}
}

# This function translates "-" as separator into a bitmask.
# $@ = comma separated list of ranges, either single value or <min>-<max>
#
# Returns on stdio:
# Mask with bits set according to the range string
get_mask_from_range () {
    declare -a range=( $(get_range "$@" "Could not calculate CPU mask") )
    declare -i mask=$(range_to_mask ${range[@]})
    printf ${mask}
}

# Print cpulist in kernel command line option to stdout.
# $1 = Kernel command line variable
get_isolated_cpus () {
    local cfg opt done=false
    until $done ; do
        IFS='=' read -d ' ' cfg opt || done=true
        [[ -z $cfg ]] && continue
        if [[ $cfg == $1 ]]; then
            printf "%s" "$opt"
            verbose_printf "Found CPU list: ${cfg:9}"
            return 0
        fi
    done < /proc/cmdline

    exit_msg "$1 kernel command line option not found"
}

# Get mask from cpulist provided by user
# $1 = cpulist
from_parameter () {
    printf "%x\n" $(get_mask_from_range $1)
}

# Get mask from Linux kernel boot args
# $1 bootarg
from_cmdline () {
    declare cpulist=$(get_isolated_cpus "$1")
    printf "%x\n" $(get_mask_from_range $cpulist)
}

# MAIN
######
declare HELP=false
declare CPULIST=""
declare ISOLCPUS=false
declare NOHZ=false

[ -z ${1:-} ] && usage

while [[ ${1:-} == -* ]]; do
    case "$1" in
        -h | --help ) HELP=true; shift ;;
        -c | --cpus ) CPULIST=$(get_arg $1 $2); shift 2;;
        -i | --isolcpus ) ISOLCPUS=true; shift ;;
        -n | --nohz ) NOHZ=true; shift ;;
        -v | --verbose ) VERBOSE=1; shift ;;
        * ) exit_msg "Invalid option $1" ;;
    esac
done

if $HELP; then
    usage
elif [ -n "$CPULIST" ]; then
    from_parameter $CPULIST
elif $ISOLCPUS; then
    declare arg="isolcpus"
    from_cmdline $arg
elif $NOHZ; then
    declare arg="nohz_full"
    from_cmdline $arg
fi

exit 0
