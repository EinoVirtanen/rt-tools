#!/bin/bash -eu

# Copyright (c) 2013,2014 by Enea Software AB
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Enea Software AB nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

version () {
    cat <<EOF
partrt 1.0

Copyright (C) 2013,2014 by Enea Software AB.

EOF
}

usage () {
    cat <<EOF
partrt - Create real time CPU partitions on SMP Linux

Usage:
partrt [options] <cmd>
partrt [options] create [cmd-options] <cpumask>
partrt [options] undo [cmd-options]
partrt [options] run [cmd-options] <partition> <command>
partrt [options] move <pid> <partition>

The purpose of partrt is to administrate CPU partitions/domains with different
requirements on OS jitter and real-time performance. partrt requires that the
Linux kernel supports SMP and cpusets. Please see the Linux cpuset
documentation for more information.

When the "create" sub-command is given, a real time partition and a non-real
time partition will be created. Then partrt will try to move all tasks into the
non-real time partition. Some kernel threads have an affinity requirement that
prohibits such a move, these will be left in the cpuset root.

Read more about reducing OS jitter in the Linux kernel documentation:
https://www.kernel.org/doc/Documentation/kernel-per-CPU-kthreads.txt

Options:

        -v           Produce informational message to stderr

        -V           Show version information and exit.

        -x           Trace script execution

        -r NAME      Name the real time partition 'NAME'
                     (default: $DEFAULT_RT_PARTITION)

        -n NAME      Name the non-real time partition 'NAME'
                     (default: $DEFAULT_NRT_PARTITION)

If <cmd> is create:

        Using prtrt with the create command will divide the available CPUs
        into two partitions. One partition "rt" (default name) and one
        partition "nrt" (default name). partrt will try to move sources of
        jitter from the "rt" CPUs to the "nrt" CPUs.

        The old environment will be saved in /tmp/partrt_env

        <cpumask>:   Mandatory cpumask that specifies CPUs for the real time
                     partition

        cmd-options:

        -b           Do not migrate block workqueue when creating a new
                     partition

        -c           Do not disable machine check (x86)

        -d           Do not defer ticks when creating a new partition

        -h           Show this help text and exit.

        -n           Disable writeback NUMA affinity

        -m           Do not delay vmstat housekeeping when creating a
                     new partition


        -r           Do not restart hotplug CPUs when creating a new
                     partition

        -t           Do not disable real-time throttling when creating a
                     new partition

        -w           Do not disable watchdog timer when creating a new
                     partition

If <cmd> is undo:

        Undo what the "create" command does. Will put all tasks in the root
        cpuset and change the IRQ affinities to include all CPUs.

        cmd-options:

        -s file      File containing environment configuration to be
                     loaded. The configuration file is normally
                     generated by the "create" sub-command
                     (/tmp/partrt_env). If no file is provided, partrt
                     will use default values for the environment.

If <cmd> is run:

        Run <command> with <options> on <partition>
        where <partition> is expressed as a CPUSET directory
        relative to CPUSET root.

        <partition>: Name of partition to execute within.

        cmd-options:

        -b           Use SCHED_BATCH

        -f <prio>    Use SCHED_FIFO with RT priority <prio>

        -i           Use SCHED_IDLE

        -o           Use SCHED_OTHER

        -r <prio>    Use SCHED_RR with RT priority <prio>

If <cmd> is move:

        Move the task with ID PID/TID into <partition>

        <pid>: PID of task to be moved

        <partition>: Name of the partition that the task should be moved to.

Example:
        Create RT partition on CPU 3:
        > partrt create 8

        Run cyclictest in the RT partition:
        > partrt run rt cyclictest -n -i 10000 -l 10000

        Move cyclictest to NRT partition:
        > partrt move "pid of cyclictest" nrt

        Undo partitioning (restore environment)
        > partrt undo

EOF
}

declare CPUSET_ROOT

declare -r DEFAULT_CPUSET_ROOT=/sys/fs/cgroup/cpuset
declare -r DEFAULT_CPUSET_PREFIX=cpuset.
declare -r DEFAULT_RT_PARTITION=rt
declare -r DEFAULT_NRT_PARTITION=nrt
declare -r MASK_MSB=31
declare -r PARTRT_SETTINGS_FILE="/tmp/partrt_env"

################
# partrt options
################
declare rt_partition=$DEFAULT_RT_PARTITION
declare nrt_partition=$DEFAULT_NRT_PARTITION
declare verbose=false

##################
# Helper functions
##################

# Print message and exit abnormally
# Will try to restore environment if called from create() scope
exit_msg () {
    echo "partrt: Failed execution: $1" >&2
    exit 1
}

# Print depending on verbosity level
# $1 Message
verbose_printf () {
    [ "$verbose" = true ] || return 0
    declare -r fmt="$1"
    shift
    printf -- "${fmt}\n" $@ >&2
}

# Used to check options that take an argument. It exits if the options is
# missing, otherwise it returns the argument.
# $1 = the option
# $2 = next word in the scripts parameter list (possibly the options argument)
#
# Depends on the following global variables:
# CMD
#
# Returns on stdio
# the argument
get_arg()
{
    if [ -z $2 ] || [[ $2 == -* ]]; then
        exit_msg "Option $1 requires an argument"
    fi
    printf "%s" "$2"
}


# Writes values to file and does proper error checking
# $1 File
# $2 Value
write_to_file () {
    declare file=$1
    declare val=$2

    if [ -a $file ]; then
        ( echo $val > $file ) || exit_msg "Failed to write $val into $file"
        verbose_printf "$val > $file"
    else
        verbose_printf "$file: Does not exist"
    fi
}

# Log preveous value to file and apply new value
# $1 - File
# $2 - Value
log_prev_and_apply () {
    declare file=$1
    declare val=$2
    declare old_val=""

    if [ -a $file ]; then
        old_val=$(cat "$file")
        echo $val > $file
        if [ $? -ne 0 ]; then
            verbose_printf "Failed to write $1 into $2"
        else
            echo "$file=$old_val" >> $PARTRT_SETTINGS_FILE
            verbose_printf "$file=$old_val > $PARTRT_SETTINGS_FILE"
        fi
    else
        verbose_printf "$file: Does not exist"
    fi
}

# Try hard to create a directory by mounting a tmpfs in the parent directory
# (given that the parent directory is empty).
create_dir_stubborn () {
    declare DIR=$1
    declare DIR_NO_SLASH=$DIR
    declare PARENT

    # Try to just create the directory
    if mkdir $DIR &> /dev/null; then
        return 0
    fi

    # Remove the last directory to get the parent directory
    while ! [ ${DIR_NO_SLASH%/} = $DIR_NO_SLASH ]; do
        DIR_NO_SLASH=${DIR_NO_SLASH%/}
    done
    PARENT=${DIR_NO_SLASH%/*}

    # Make sure the parent exists
    if ! [ -d $PARENT ]; then
        exit_msg "$DIR: Unable to create directory, parent directory does not exist"
    fi

    # Is it safe to mount a tmpfs over the parent dir?
    if [ -n "$(ls -A $PARENT)" ]; then
        exit_msg "$DIR: Unable to create directory, and parent directory is not empty"
    fi

    # Try the mount
    if ! mount -t tmpfs none $PARENT; then
        exit_msg "$DIR: Unable to make parent writable by mounting tmpfs in place"
    fi

    # The mkdir should now succeed
    if ! mkdir $DIR; then
        exit_msg "$DIR: Unable to create directory in tmpfs parent"
    fi

    return 0
}

get_cpuset_root () {
    grep -q -s cpuset /proc/filesystems || exit_msg "Kernel is lacking support for cpuset"

    if [[ -d ${DEFAULT_CPUSET_ROOT} ]]; then
        verbose_printf "$DEFAULT_CPUSET_ROOT: Using existing mount"
    else
        verbose_printf "$DEFAULT_CPUSET_ROOT: Mounting CPUSET"
        if ! [ -e $DEFAULT_CPUSET_ROOT ]; then
            create_dir_stubborn $DEFAULT_CPUSET_ROOT
        fi
        mount -t cgroup -o cpuset none $DEFAULT_CPUSET_ROOT || exit_msg "$DEFAULT_CPUSET_ROOT: Could not mount cpuset"
    fi

    echo "$DEFAULT_CPUSET_ROOT"
}

# pass CPUSET_ROOT as first argument
get_cpuset_prefix() {
    if [ -e $CPUSET_ROOT/cpus ]; then
        echo ""
    elif [ -e $CPUSET_ROOT/${DEFAULT_CPUSET_PREFIX}cpus ]; then
        echo $DEFAULT_CPUSET_PREFIX
    else
        exit_msg "Error: don't know what prefix to use"
    fi
}

# Print the name of given PID/TID to stdout.
# $1 = PID/TID
pid_to_name () {
    head -n 1 /proc/$1/status | cut -f 2
}

# Depends on the following global variables:
# CPUSET_ROOT
#
# Move given task to given partition
# $1 = PID/TID
# $2 = Partition, empty if root
move_task () {
    if echo $1 > $CPUSET_ROOT/${2:-}/tasks 2>/dev/null; then
        [ "$verbose" = true ] && verbose_printf "$1 ($(pid_to_name $1)): Moved to ${2:-root}"
    else
        [ "$verbose" = true ] && verbose_printf "$1 ($(pid_to_name $1)): Could not be moved to ${2:-root}"
    fi

    # Make sure to return success, even if some move failed
    return 0
}

# Set IRQ affinity on given IRQ
# $1 - IRQ vector number
# $2 - Mask to use for smp_affinity
set_irq_affinity () {
    declare -ri vector="$1"
    declare -ri mask="$2"

    if printf "%x" $mask > /proc/irq/$vector/smp_affinity 2>/dev/null; then
        verbose_printf "Vector $vector: Setting affinity mask 0x%x" $mask
    else
        verbose_printf "Vector $vector: Failed setting affinity mask 0x%x" $mask
    fi
}

# Set a new affinity mask on all existing and future IRQs
# $1 - mask
irq_new_mask () {
    mask=$1

    verbose_printf "Setting IRQ affinity to mask 0x%x" $mask

    # Set affinity to interrupts registered in the future
    printf "%x" $mask > /proc/irq/default_smp_affinity

    for dir in /proc/irq/*; do
        [[ -d $dir ]] && set_irq_affinity "$(basename $dir)" $mask
    done

    # Make sure to return success, even if some move failed
    return 0
}

# Convert CPU mask to comma seperated list
# $1 = cpumask
mask_to_list () {
    declare new_list=""
    declare str_elem=""
    declare -i mask=$1
    declare first_elem=true

    for ((bit=0; bit<=$MASK_MSB; bit++)); do
        if (( $mask & ( 1 << $bit ) )); then
            if [ $first_elem = true ]; then
                first_elem=false
                str_elem="$bit"
            else
                str_elem=",$bit"
            fi
            new_list=$new_list$str_elem
        fi
    done

    printf $new_list
}

#######################
# Partition sub-command
#######################

# TODO: Add intelligent NUMA handling

create () {
    CPUSET_ROOT=$(get_cpuset_root)
    CPUSET_PREFIX=$(get_cpuset_prefix $CPUSET_ROOT)
    declare isolated_cpu_list=""
    declare nonisolated_cpu_list=""
    declare re='^[0-9]+$'
    declare datestr=$(date +"%Y-%m-%d--%r")
    declare -i rt_mask=0
    declare -i nrt_mask=0
    declare -i nr_of_cpus=$(grep -c ^processor /proc/cpuinfo)
    declare -i available_cpu_mask=$((2 ** $nr_of_cpus - 1))
    declare migrate_bwq=true
    declare disable_machine_check=true
    declare defer_ticks=true
    declare delay_vmtimers=true
    declare disable_numa_affinity=true
    declare restart_hotplug=true
    declare disable_throttle=true
    declare disable_watchdog=true

    while getopts ":bcdhmnrtw" o; do
        case "${o}" in
            b) migrate_bwq=false;;
            c) disable_machine_check=false;;
            d) defer_ticks=false;;
            h) usage; exit 0 ;;
            m) delay_vmtimers=false;;
            n) disable_numa_affinity=false;;
            r) restart_hotplug=false;;
            t) disable_throttle=false;;
            w) disable_watchdog=false;;
            \?) exit_msg "Invalid option: ${OPTARG} " ;;
            :) exit_msg "Invalid option: -${OPTARG} missing mandatory argument"
        esac
    done

    shift $(( ${OPTIND} - 1 ))
    [ -z ${1:-} ] && exit_msg "Missing mandatory cpumask"
    rt_mask=$1;

    [[ ! $rt_mask =~ $re || $rt_mask -le 0 || $rt_mask -gt $available_cpu_mask ]] && exit_msg "Illegal CPU mask: $rt_mask"

    isolated_cpu_list=$(mask_to_list $rt_mask)
    nrt_mask=$(( ~$rt_mask & $available_cpu_mask ))
    nonisolated_cpu_list=$(mask_to_list $nrt_mask)

    # Check if there are present partitions
    #######################################
   [ -n "$(find $CPUSET_ROOT/* -type d)" ] && exit_msg "There are allready cpusests/partitions on the system."

    # Create RT partition
    #####################
    if [[ ! -d $CPUSET_ROOT/$rt_partition ]]; then
        mkdir $CPUSET_ROOT/$rt_partition
    fi

    # Allocate CPUs
    write_to_file $CPUSET_ROOT/$rt_partition/${CPUSET_PREFIX}cpus $isolated_cpu_list

    # Make sure RT partition is alone on these CPUs
    write_to_file $CPUSET_ROOT/$rt_partition/${CPUSET_PREFIX}cpu_exclusive 1

    # No particular requirements on memory handling
    write_to_file $CPUSET_ROOT/$rt_partition/${CPUSET_PREFIX}mems 0

    # Create NRT partition
    #######################
    if [[ ! -d $CPUSET_ROOT/$nrt_partition ]]; then
        mkdir $CPUSET_ROOT/$nrt_partition
    fi

    # No particular requirements on memory handling
    write_to_file $CPUSET_ROOT/$nrt_partition/${CPUSET_PREFIX}mems 0

    # Allocate CPUs
    write_to_file $CPUSET_ROOT/$nrt_partition/${CPUSET_PREFIX}cpus $nonisolated_cpu_list

    # Move all tasks/processes from root partition to NRT
    #####################################################
    while read task; do
        move_task $task $nrt_partition
    done < $CPUSET_ROOT/tasks

    # Disable load balancing on top level, otherwise child partition settings
    # will not take effect
    write_to_file $CPUSET_ROOT/${CPUSET_PREFIX}sched_load_balance 0

    # Enable load balancing in NRT partition
    write_to_file $CPUSET_ROOT/$nrt_partition/${CPUSET_PREFIX}sched_load_balance 1

    # Disable load balancing in RT partition
    write_to_file $CPUSET_ROOT/$rt_partition/${CPUSET_PREFIX}sched_load_balance 0

    # Handle IRQs
    irq_new_mask $nrt_mask

    # Create new sttings file or overwrite the old one
    echo "partrt_settings: $datestr" > $PARTRT_SETTINGS_FILE

    # Disable real time throtteling
    ###############################
    if [ "$disable_throttle" = true ]; then
        log_prev_and_apply /proc/sys/kernel/sched_rt_runtime_us -1
    fi

    # Disable sched_tick_max_deferment
    ##################################
    if [ "$defer_ticks" = true ]; then
        log_prev_and_apply /sys/kernel/debug/sched_tick_max_deferment -1
    fi

    # Delay vmtimer timeouts
    ########################
    if [ "$delay_vmtimers" = true ]; then
        # If possible, you can try to add the following patch to your kernel:
        # https://lkml.org/lkml/2013/9/4/379
        # Increase timer period to 1000 seconds
        log_prev_and_apply /proc/sys/vm/stat_interval 1000
    fi

    # Disable NUMA affinity
    ########################
    if [ "$disable_numa_affinity" = true ]; then
        log_prev_and_apply /sys/bus/workqueue/devices/writeback/numa 0
    fi

    # Disable watchdog
    ######################
    if [ "$disable_watchdog" = true ]; then
        log_prev_and_apply /proc/sys/kernel/watchdog 0
    fi

    # Move block device writeback workqueues
    ########################################
    if [ "$migrate_bwq" = true ]; then
        log_prev_and_apply /sys/bus/workqueue/devices/writeback/cpumask $(printf "%x" $rt_mask)
    fi

    # Disable machine check (Writing 0 to machinecheck0/check_interval will
    # disable it for all CPUs)
    ########################################
    if [ "$disable_machine_check" = true ]; then
        log_prev_and_apply /sys/devices/system/machinecheck/machinecheck0/check_interval 0
    fi

    # Turn off real time CPUs to force timers to migrate
    ####################################################
    if [ "$restart_hotplug" = true ]; then
        # All CPUs should be turned off before any is started again
        for rt_cpu in $isolated_cpu_list; do
            write_to_file /sys/devices/system/cpu/cpu$rt_cpu/online 0
        done
        for rt_cpu in $isolated_cpu_list; do
            write_to_file /sys/devices/system/cpu/cpu$rt_cpu/online 1
        done

        # Create the RT partition again
        ###############################

        #Allocate CPUs
        write_to_file $CPUSET_ROOT/$rt_partition/${CPUSET_PREFIX}cpus $isolated_cpu_list

        # Make sure RT partition is alone on these CPUs
        write_to_file $CPUSET_ROOT/$rt_partition/${CPUSET_PREFIX}cpu_exclusive 1

        # No particular requirements on memory handling
        write_to_file $CPUSET_ROOT/$rt_partition/${CPUSET_PREFIX}mems 0
    fi


    echo "System was successfylly divided into following partitions:"
    echo "Isolated CPUs ($rt_partition):$isolated_cpu_list"
    echo "Non-isolated CPUS ($nrt_partition):$nonisolated_cpu_list"
}


# $1 - path to settings file
restore_from_file () {
    declare first_line=true
    # Check if file exists
    [ -a $1 ] || exit_msg "Provided configuration file: $1 does not exist"

    while read -a line || [[ ${#line[@]} > 0 ]]; do
        # Check if this is a partrt settings file
        if [ $first_line  = true ]; then
            IFS=' '
            if [ "${line[0]}" !=  "partrt_settings:" ]; then
                exit_msg "Corrupt settings file: $1"
            fi
            first_line=false
            continue
        fi

        IFS='='
        entry=( ${line[0]} )
        name=${entry[0]}
        val=${entry[1]}
        IFS=' '

        if [ -a "$name" ]; then
            verbose_printf "echo $val > $name"
            echo $val > $name
        else
            verbose_printf "Failed to write $val into $name"
        fi

    done < $1
}


# Restore environment
#########################
# undo sub-command
#########################
# Restores environmen. Configures all IRQ and task affinities to include all
# CPUs. It also tries to restore certan configurations from file. If no
# configuration file is provided it defalts to some standard values.
# $1 Settings file
undo () {
    CPUSET_ROOT=$(get_cpuset_root)
    CPUSET_PREFIX=$(get_cpuset_prefix $CPUSET_ROOT)
    declare nr_of_cpus=$(grep -c ^processor /proc/cpuinfo)
    declare -i mask=$((2 ** $nr_of_cpus - 1))
    declare settings_file=""

    while getopts ":hs:" o; do
        case "${o}" in
            h) usage; exit 0 ;;
            s) settings_file=${OPTARG}; shift 2 ;;
            \?) exit_msg "Invalid option: ${OPTARG} " ;;
            :) exit_msg "Invalid option: -${OPTARG} missing mandatory argument"
        esac
    done

    if [[ -d $CPUSET_ROOT/$rt_partition ]]; then
        # Move from RT to root
        while read task; do
            move_task $task
        done < $CPUSET_ROOT/$rt_partition/tasks
    fi

    if [[ -d $CPUSET_ROOT/$nrt_partition ]]; then
        # Move from NRT to root
        while read task; do
            move_task $task
        done < $CPUSET_ROOT/$nrt_partition/tasks
    fi

    # Enable load balancing again
    echo 1 > $CPUSET_ROOT/${CPUSET_PREFIX}sched_load_balance || exit_msg "Could not set root partition load balancing"

    # Remove created directories
    if [[ -d $CPUSET_ROOT/$rt_partition ]]; then
        verbose_printf "Removing rt partition"
        rmdir $CPUSET_ROOT/$rt_partition
    fi

    if [[ -d $CPUSET_ROOT/$nrt_partition ]]; then
        verbose_printf "Removing nrt partition"
        rmdir $CPUSET_ROOT/$nrt_partition
    fi

    # Handle IRQs
    #############

    irq_new_mask $mask

    if [ -n "$settings_file" ]; then
        restore_from_file $settings_file
    else
        # Use Enea Linux default settings
        write_to_file /proc/sys/kernel/sched_rt_runtime_us 950000
        write_to_file /sys/kernel/debug/sched_tick_max_deferment 100
        write_to_file /proc/sys/vm/stat_interval 1
        write_to_file /sys/bus/workqueue/devices/writeback/numa 1
        write_to_file /proc/sys/kernel/watchdog 1
        write_to_file /sys/devices/system/machinecheck/machinecheck0/check_interval 300
        write_to_file /sys/bus/workqueue/devices/writeback/cpumask $(echo $(printf "%x" $mask))
    fi

    echo "System was successfully restored"
}


#################
# Run sub-command
#################
run () {
    CPUSET_ROOT=$(get_cpuset_root)
    CPUSET_PREFIX=$(get_cpuset_prefix $CPUSET_ROOT)
    declare sched_policy=""
    declare -i prio=0
    declare re='^[0-9]+$'
    declare partition=""

    while getopts ":bf:hior:" o; do
        case "${o}" in
            f|r) sched_policy="-${o}"; prio=${OPTARG}; shift 2 ;;
            h) usage; exit 0 ;;
            b|i|o) sched_policy="-${o}"; shift ;;
            \?) exit_msg "Invalid option: ${OPTARG} " ;;
            :) exit_msg "Invalid option: -${OPTARG} missing mandatory argument" ;;
        esac
    done

    [ -z ${1:-} ] && exit_msg "Missing mandatory partition name"
    partition=$1; shift;

    [[ -d $CPUSET_ROOT/$partition ]] || exit_msg "Could not find cpuset partition: $partition"

    [ -z ${1:-} ] && exit_msg "No command to execute"

    write_to_file $CPUSET_ROOT/$partition/tasks $$

    if [[ -z $sched_policy ]]; then
        exec "$@"
    else
        [[ ! $prio =~ $re || $prio -le 0 || $prio -gt 99 ]] && exit_msg "Illegal priority: $prio"
        exec chrt $sched_policy $prio "$@"
    fi
}


#################
# mov sub-command
#################

move () {
    CPUSET_ROOT=$(get_cpuset_root)

    while getopts ":h" o; do
        case "${o}" in
            h) usage; exit 0 ;;
            \?) exit_msg "Invalid option: ${OPTARG} " ;;
            :) exit_msg "Invalid option: -${OPTARG} missing mandatory argument"
        esac
    done

    [ -z ${1:-} ] && exit_msg "Missing mandatory task ID"
    declare pid=$1; shift;
    [ -d /proc/$pid ] || exit_msg "Task ID $pid does not exist"

    [ -z ${1:-} ] && exit_msg "Missing mandatory partition name"
    declare partition=$1; shift;
    [ -a $CPUSET_ROOT/$partition ] || exit_msg "Partition $partition does not exist"

    move_task $pid $partition
}

######
# Main
######

# Parse commoncommand line options
##################################
while getopts ":hn:r:vVwx" o; do
    case "${o}" in
        h) usage; exit 0 ;;
        n) nrt_partition=${OPTARG};;
        r) rt_partition=${OPTARG} ;;
        v) verbose=true;;
        V) version; exit 0 ;;
        x) set -x;;
        \?) exit_msg "Invalid option: ${OPTARG} " ;;
        :) exit_msg "Invalid option: -${OPTARG} missing mandatory argument"
    esac
done

shift $(( ${OPTIND} - 1 ))
OPTIND=1

# Determine sub-command
#######################
declare -a VALID_SUBCOMMANDS="create undo run move"

for cmd in $VALID_SUBCOMMANDS; do
    if [[ $cmd == ${1:-} ]]; then
        shift
        $cmd "$@"
        exit
    fi
done

if [[ -z ${1:-} ]]; then
    echo "Expected sub-command. Use 'partrt -h' for help." >&2
else
    echo "Illegal sub-command: '$1'. Valid commands: ${VALID_SUBCOMMANDS}. Use 'partrt -h' for help." >&2
fi

exit 1

# vim:noet:sw=4:ts=8
